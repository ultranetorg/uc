using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Numerics;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using Nethereum.ABI.Util;
using Nethereum.BlockchainProcessing.BlockStorage.Entities;
using Nethereum.Hex.HexConvertors.Extensions;
using Nethereum.Model;
using Nethereum.RPC.Accounts;
using Nethereum.Signer;
using Nethereum.Util;
using Nethereum.Web3;
using Nethereum.Web3.Accounts;
using Org.BouncyCastle.Utilities;
using Org.BouncyCastle.Utilities.Encoders;
using RocksDbSharp;

namespace UC.Net
{
	public delegate void BlockDelegate(Block b);

	public class Database
	{
		class Genesis
		{
			public Zone			Zone;
			public Cryptography Crypto;
			public string		Rounds;
		}

		public const int					Pitch = 8;
		public const int					LastGenesisRound = Pitch * 3;
		public const int					MembersMin = 7;
		public const int					MembersMax = 1024;
		public const int					NewMembersPerRoundMax = 1;
		public const int					MembersRotation = 32;
		public static int					TailLength => Settings.Dev != null ? Settings.Dev.TailLength : 1000;
		const int							LoadedRoundsMax = 1000;
		public static readonly Coin			BailMin = 1000;
		public static readonly Coin			FeePerByte = new Coin(0.000001);

		public Settings						Settings;
		public Role							Roles => (Settings.Database.Base ? Role.Base : 0) | (Settings.Database.Chain ? Role.Chain : 0);

		public List<Round>					Rounds	= new();
		public Dictionary<int, Round>		LoadedRounds = new();
		public List<Member>					Members	= new();
		public List<Account>				Funds = new();
		public List<MembersJoinRequest>		JoinRequests = new();

		public RocksDb						Engine;
		public byte[]						BaseState;
		static readonly byte[]				BaseStateKey = new byte[] {0x01};
		//public byte[]						__BaseStateHash;
		static readonly byte[]				__BaseHashKey = new byte[] {0x02};
		public byte[]						BaseHash = Cryptography.ZeroHash;
		static readonly byte[]				ChainStateKey = new byte[] {0x03};
		//static readonly byte[]				LastCommitedRoundHashKey = new byte[] {0x03};
		//public byte[]						LastCommitedRoundHash;
		public AccountTable					Accounts;
		public AuthorTable					Authors;
		public ProductTable					Products;
		public RealizationTable				Realizations;
		public ReleaseTable					Releases;
		public int							Size => BaseState == null ? 0 : (BaseState.Length + 
																			Accounts.Clusters.Sum(i => i.MainLength) +
																			Authors.Clusters.Sum(i => i.MainLength) +
																			Products.Clusters.Sum(i => i.MainLength) +
																			Realizations.Clusters.Sum(i => i.MainLength) +
																			Releases.Clusters.Sum(i => i.MainLength));
		public Log							Log;
		public BlockDelegate				BlockAdded;

		readonly static List<Genesis>		Genesises =	new()
											{
												new Genesis {Zone = Zone.Localnet, Crypto = new NoCryptography(), Rounds = "" },
												//new Genesis {Zone = Zone.Local, Crypto = new EthereumCryptography(), Rounds = "0001000002030000ffea61659c02c4a38d5736767bec23ab8d28752118dcc5aa9c4ea5ac7a6baeb2c00fe795131249fff38aa123804415e92fc46067430454532a3445367b2f6fa24e6f0f1f71eeebf77d3f5179dbeec93eda59ea1b00000000000000000000000000000832b3d6ba18c945bbfc9baf44b52f65a449880b348520ccb42cd5fb38fc5016fe73c908ba73699e77c8c0d350ff14bc3d5f46e6d109f29cd21e4312679095a5f81b00000201090000a0dec5adc93536c0a8016a02080000c84e676dc11b000f31436863408437bf50c02865cab034aafe625d71fe4c9af7ccbbb72f7bd5b37feb8aba785eac0d60327ee7ab779525c12ee1957468336bc916c34a35273def1c00000201090000a0dec5adc93536c0a8016902080000c84e676dc11b00ae7ba257f8ae7dc6ae1c6c9a18f0947def9550a079abc02380020bea56162c37673c77412077a28c7e8e8d3803fbbdc11ff354dcf5f582d7aae42c5142a2b62e1c00000201090000a0dec5adc93536c0a8016802080000c84e676dc11b001a06703e7774c581c5f22c57e5d4ae01c7d3eb81e305ec5d32ae7521e6d53f836d9694151789a36e33dac68339f47bfe70b16c6b78fa6e8ca3ebcd44607b8ca11c00000201090000a0dec5adc93536c0a8016702080000c84e676dc11b00c97c2585746d1aed2eed862a21abeac3df1a4ceb2871429e3f40548660742159686039fdc966acc4679a8334b366c90db87333d849c5d92ed313625083f9981e1b00000201090000a0dec5adc93536c0a8016602080000c84e676dc11b006ffec6696eaf311a4e6d0b4ed03a3b8e4c7a37f8c4bd6f8e1a6568d3a58360916066f20a448846f1f5ce2fe0d494895dfc490278e38f70e94876e540f57231171b00000201090000a0dec5adc93536c0a8016502080000c84e676dc11b00e15bbcb49faa9daa8586b24aee9a1a7058b270e5325698eefb8507c7441616cf16fb8372bf549782c930b4e926affa5f30e01855a673a0142a95b730689996bb1c00000201090000a0dec5adc93536c0a8016402080000c84e676dc11b0089531e12cf910e62c26d5b8d5388527fa3d90b841955d385cfa9985482c706d054cef1778afbefa0ce61aeae488adb549b49dc29461e4348a32f6cf62d9a781a1b0000020402756f01000208000064a7b3b6e00d000100000038a7a3cb80ec769c632b7b3e43525547ecd1262509a8167f6693d39f21763f27134736a2b7ac3748f63f8bc602f7d6411ec357f4482ec576c8fca0c1e81f572ca0049461ed1c01a7cd5a1fb2fb64cdf3acf51cc0a8016400000000000101000001030100ffea61659c02c4a38d5736767bec23ab8d287515bb970258e792336b5b5a25a2776bb5545d86727877b66484e2cd938336721a6a79c88085bcefcab120b0983db1b64b6c0d3836a7a075f7672d8f96b03458b81b0081d8c4bd75000000000000000000000000011add463d846716812fb3d8992eef576e4e8aea1061a47ff5e4412fdadc32befc04e5db6b6074a017ee57b1cfce40f80f74aa7ae1b35a43212cc086bf914750c71b0101010502756f02554fff00000000000201000001030200ffea61659c02c4a38d5736767bec23ab8d2875726fa00c278d0194b0ed9b201949f2b2b579598afeeaf69a841b44149c5f9e1448ae784e390eb45adc8049beff11929d5eabfd388a29ee6713b7974541c8191a1c00010000000000000000000000000000000000000301000001030300ffea61659c02c4a38d5736767bec23ab8d28753eef6e8f4c15ddcfd8a6d7f18ed8d9f99a873523595a92a1fb4a2bc2e771bab84ddc51fcd004f55fa8a49597102d54195c18a4be6423b962bf58fa6fbe19dac61b00010000000000000000000000000000000000000401000001030400ffea61659c02c4a38d5736767bec23ab8d2875e4d286f6fd65b81e96a3612c32edcb047ee164c163fdb2443a6dbd95fde57493559f726e39eb0944f8e670005e1effe59e124e19fe9d4da5d6dc6f749c2eb7781b00010000000000000000000000000000000000000501000001030500ffea61659c02c4a38d5736767bec23ab8d28752b8041c52bc22ae8fab2e95c2a03223e84bad203db2f1bd34957e41d18a774f06a6a3e1ec12aacf994a3c8bc61d587d0984b4d223369cd38be0425f9ba9ede291b00010000000000000000000000000000000000000601000001030600ffea61659c02c4a38d5736767bec23ab8d2875511857c0b4df66d58af0c1237f1e55e3508d4232c1c9c7935b8576861ab9869c330d429aaab5587e9c19d61d4c68f0c7e5cd3223ab62ed3c09ff0f85a2d7c2be1b00010000000000000000000000000000000000000701000001030700ffea61659c02c4a38d5736767bec23ab8d2875b890b2162ca8b00993baf33d84568b67343212bf7fca18eb04e1677dd55fe7bd32e2dd35822c66d2612222a3100713eee5772719ccc244ad98480fee2292de391c00010000000000000000000000000000000000000801000001030800ffea61659c02c4a38d5736767bec23ab8d2875ee02ea3c839beb5929dc5bd7015d9a508419dffcff6d82d64fc35bb0d7c29ca66c7eaa76f023d11a5e277241b217f51458b4bbb26b695de51443b646f239131c1c0001000000000000000001000038a7a3cb80ec769c632b7b3e43525547ecd10000000000000000000901000001030900ffea61659c02c4a38d5736767bec23ab8d28752d86e829f4f3467a2a7d35411992baed3f646b25bb94da7b858320e8d92e0f153b410caa15ff00f0daef27915834118842c4ee23e918f14bd384be2b14e388841c0001000000000000000000000100fe929a68368c301a1906ed39016ee9be3d937b000000000000000a01000001030a00ffea61659c02c4a38d5736767bec23ab8d2875a1ab94398ff9ed9488233381df7aec80cd239e9f60cf5d3473a07f0c87774c7932ef58a0246dde93a989f4581c8a6a98fbb550eddafdad9b76270dbf7ae86a4e1c00010000000000000000000000000000000000000b01000001030b00ffea61659c02c4a38d5736767bec23ab8d287582bd2bf95a787747a6ded0e177430b660b59e1cd8f15eedd7473197e2bfeae2f01fe94ebd4a25c5c07b203993b873df3635eea3f558c4b04b45c824f0c7f9e551b00010000000000000000000000000000000000000c01000001030c00ffea61659c02c4a38d5736767bec23ab8d28758bdd4fe8f8a51e305c1047c3cbb60f71e49e225b62a2a9d0ad24288f24d599193c624422c21ad0a689d07222eaa574ca3ab5d74d1f4ee0e7bee7ec9713964caf1b00010000000000000000000000000000000000000d01000001030d00ffea61659c02c4a38d5736767bec23ab8d28751f7cad65a8132dd003cc78f5cd2072b968eab3fbc81723412744f687570b3d381c2a4a04902125201583da4914d9a0a3f0e8ff7a8abbd458626209269a05b2091c00010000000000000000000000000000000000000e01000001030e00ffea61659c02c4a38d5736767bec23ab8d2875756b64452b2da3d326f9f457eba3ff70c2fa91dc726b0adecb867a340ae2be256b4059e38f16a4f1bc28fb7bbf341b83de39d52bf53fff3da53a52d7981a735c1c00010000000000000000000000000000000000000f01000001030f00ffea61659c02c4a38d5736767bec23ab8d287508994bf6f6ade6ea4327286abc5e5a91d7ea8877817d1f10125ea5e5d5f347f955b7c714ff44119171552674a1b3323263f201bad656719708fd30ed3ece58fc1b00010000000000000000000000000000000000001001000001031000ffea61659c02c4a38d5736767bec23ab8d28753311bef7c11f68a9fd87a6f624f77dbcaea32116972ae7662dc30f9b562d5da77d9defa7040c6b2bac8644902e795c9e7b83e2f0e64662d89c1b6c54d62d20b71b000101763880ea0001000038a7000000010000000000000000000000"},
												//new Genesis {Zone = Zone.Testnet0,	Crypto = new EthereumCryptography(), Rounds = "000001020100000038a7a3cb80ec769c632b7b3e43525547ecd1f5134209d039b6b90e792450dbe8d0aa771a450b479c161b13cc0d056b46558d78b427946ed87451efca7890c0e4a2787ae4bb7f5b5c1f15372718a180f922d41b4e2fcc64030000ffea61659c02c4a38d5736767bec23ab8d2875662789e409a26ca49c583a349b69618cd1ce323fad7dafe114fb28abbaa171cd569d0615fad5d88381aacae25bbe5ce4278aa292c519319cb7e38b37dbd190961c0000000000000000000000000100fe929a68368c301a1906ed39016ee9be3d937b0008a285a2283f5c4559b49d81c80e7d32d2c3ae8e4fe1ab5ce94d87a3601befbdd276d00ce8d629b5290c7d4fdaecd16fd453338acf3645b0a2609eebbd43806ecf1c00020101090000a0dec5adc935364e2fcde5020009000040bd8b5b936b6c00840e5c222074ed3bf7e26f2f040e51d0d009f6c90bc1e61c6bec3589606bf8673e4ed0f6250f21e97e564dba4e98257670785232defbdba4e6e4cb5f49e6d04c1c00020101090000a0dec5adc935364e2fc6da020009000040bd8b5b936b6c00ec3f2cc97a33c369a3b785d524d38c4f58e22c5854a2980944f7a1521774a7fc0f4a2d6aff555487c13b5f4a8b27d844a48afc35fb0c616c4f675f78e1d3b7651b00020101090000a0dec5adc935364e2fd6ab020009000040bd8b5b936b6c00e628d45a93b75430b1ba924955295a2d9fc53393fa9aeacf7dc28977d9fc5478079268ba8f354ac45d870ecf9ca4aa3463f4a7c1f855513de2161816827667581c00020101090000a0dec5adc935364e2fd6aa020009000040bd8b5b936b6c00e140d1b584d68d63b9b050662a8bd4c8b870ac861cb53a54f7d7fb9cef4c4815105efaf9325a3836c7dadd1d493c25402361d66ba75530a7863f8bdc77a15b6b1b00020101090000a0dec5adc935364e2fd6a6020009000040bd8b5b936b6c009f3da5d161284e26e4da6d41ae8448efe12d37d13f28c2b3a22775647d6d132852053a0008390f21ca29d3e0a1cd0f669b943d1b30fe0751c1fa5ab038dfe1d51c00020101090000a0dec5adc935364e2fd6a1020009000040bd8b5b936b6c0078da1bca585a857b3d1be3e70437f215cc3ada5d8c4d9d4a80c81c05005f43b55ae193b6aec0ff4605d10d7d2dd36320a092c33fa17cedaa16ad1627d253aac91c00020101090000a0dec5adc935364e2fcc64020009000040bd8b5b936b6c00b7479d7c4c542d0893e065c3914cbaefe20993b670a96295c74c2bbb4730427e7fe95ee75d3d4d0b93589412df376eb707f55ee4ac2c0374a6428e026300ae251c0002040102756f0100020008000064a7b3b6e00d0001000101030100ffea61659c02c4a38d5736767bec23ab8d287574ec8f76c2a6aad74b33cc9c090e4ffb2d083115aee93f2ff74f8e9903fe1ae86c626956f91d1473a245e82e240b0502f4d00248b83299fe828ec52ffd6d27b41c0081d8c4bd75000000000000000000000000018a1bedb16356f1b9499dc20579bf1b3c99e12ca2b6163879eb3e83314a90047b2769a581b1d8dd7cc798f14ff0b95f730a0d087e4b4d389aa80241a648ef57361c0101050202756f02554fff02000101030200ffea61659c02c4a38d5736767bec23ab8d2875a0105130a2609cb4e8b3398fffcf86117a79a41b21eb33840398c0a99d4a41af5e529b480058a8583ebb1e8718c21b1fd831f3f9f8935b0468a404eea768717b1c00010000000000000000000000000003000101030300ffea61659c02c4a38d5736767bec23ab8d287582e47b8f8191079e282c13f9d3ae1f61270cbe5ab7dd023bb5229a3e2e0899106fda5752cd3ba9e26c6d0a20cbd7ea1366a2427f90defcd664ee5f8cd4dd8a091b00010000000000000000000000000004000101030400ffea61659c02c4a38d5736767bec23ab8d28754d4ee934e5b1fee07e55852144816ecb275b0f6c216371c243ddf33538c5c0d65c6c4e36fa87b96a8c92b25c518968d6a4672ca81c580609d46e3913b47af2b61c00010000000000000000000000000005000101030500ffea61659c02c4a38d5736767bec23ab8d2875087395248ba2561d81efa782962d2d67c4b8c8dde4028209b0b9b9aa04464daf6fe2d5ca842389014cc93468b62302d4ad09ed8f4c93f3bb8807673d4e9959e41b00010000000000000000000000000006000101030600ffea61659c02c4a38d5736767bec23ab8d28755c5936a64a3f3ac4cc982a5c485e05889126b57a835cd083ac23790ce8afb9a22686bfc02dc198cb4b8bd282ebeb4fbd002e1cb4ac2d09ba0e68bec64b774ca21b00010000000000000000000000000007000101030700ffea61659c02c4a38d5736767bec23ab8d2875c58f7bf74b5952c5a989494223b84ad06ec405114fc145355dc70839e2cab81a3e9147950d05d9fccf4e231474fdf782de2007c19a46dd51f55ddf70be312cf11c00010000000000000000000000000008000101030800ffea61659c02c4a38d5736767bec23ab8d2875c11d4c39faddaedf3091911250ef0c1479f60818ce35fb8393b4d123788121c411339bbd44f3091ab14f45fc75198bd4fd28874b37a61925d0a4decefa3334271b0001000000000000000001000038a7a3cb80ec769c632b7b3e43525547ecd10000000009000101030900ffea61659c02c4a38d5736767bec23ab8d28753a9032657cc1433204da2db080d6efdf035885855811716767314226287f60937d354fec92f428a433dc69a2015395f17adeaa3101ea9eae235a803208fd0be51c0001000000000000000000000000000a000101030a00ffea61659c02c4a38d5736767bec23ab8d28754464b274f931ecc8e9c6e403e1736132c8edd28db4d195762a35c720eb3efd5928a7c762be13451ab73235acff316b6861cd1c1067ad464f24b8d7b4e089d86f1c0001000000000000000000000000000b000101030b00ffea61659c02c4a38d5736767bec23ab8d28751a1aff5d76520b5b7e35bb0cc0b6b02506535035acb0e9fedaf8b9f86cd902cf027550efdcb98ac0c84beb95a11d9d293431f930ddc71bd2096ef1569f21a12b1c0001000000000000000000000000000c000101030c00ffea61659c02c4a38d5736767bec23ab8d2875c438c8bf112e03288672771526478e44dc4de48d6f8f0a29742ab288d5f585484e16aa0f8cd907d7ebd37a16da7892d7e2120886f2b2dec17d993d8f23263dba1c0001000000000000000000000000000d000101030d00ffea61659c02c4a38d5736767bec23ab8d2875e36068edd2d27d0faa5183e98def0e080aed92cbdfb0b6bcdf343171fae5258138fe3f7c89316aa6a893386d7224cc51060e6f91ae4ad3acc6566abef1bb5ccd1b0001000000000000000000000000000e000101030e00ffea61659c02c4a38d5736767bec23ab8d2875058ee8f1d6873facda8451e53d8d82d878455967af3a651f345ddfc3b832310678c012fe3298be2f6d489952476e06e9a7d27e75c375f21f02d913ec0c8903991b0001000000000000000000000000000f000101030f00ffea61659c02c4a38d5736767bec23ab8d2875811d61eb26e70339cda975f8005e1bc36463106fc7de9f69dab085e8de3a11984f8a74cb99fa7c9f4c814a377a6b9f373622ef0dfb2b6245024b5432288e157a1b00010000000000000000000000000010000101031000ffea61659c02c4a38d5736767bec23ab8d2875bd2c9f15cfa4fb686a2c9b341c9e781f7c1026ae63622f873a2045a8e9ae25a932fd071d6607d3e0ed4d3717698d08a2454a3ff1740257521674bd1af92209ab1c00010180790a560001000038a700000001000000000000"},
												new Genesis {Zone = Zone.Testnet1, Crypto = new EthereumCryptography(), Rounds = "0801a87736c81a713ef8a4e9b1d0f9a745bc001e9dfe618ba70dcfdd59df1d64ac6bfa19c7472e33e0d376b48b8552016f3977aff42d746e8277f9b78972b7ab9bfc6041c6731c0000010300ffff50e1605b6f302850694291eb0e688ef1567711319863b2e3cbe2a6af129816bbee65451829023b51e93564a9817e09d931c03e94e1c621e19a8053c6758e5e8b2f6927d42642aceb9f1f30f3f73ebdb48afa1b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001eeee974ab6b3e9533ee99f306460cfc24adcdae00041ea718ccdf3590af8ee7483c9b2ae62275b1d0946dc3e4bd431e522874c78b67443f67e67c57aec15933e3e3445a55cf0e51a596c35b8030917bab7b53a6fcec11b000201010b0010357ca5997a866cd2000200090000a0dec5adc935360050af16859e4a2bbc6d2ef1d181acfed97823053323f7cd76621737dc26408b323be97b2e7b2f6d549ae20ed80c329e73e29503998cf1a4796fc818fc6aa9ace31c000201010b0065b49dd2f741f271d2000200090000a0dec5adc935360025c901221972c29803740cb93fbca363d1a1f4104336242135829287724754ec709d388e4af25afc62938e71d138db9b84928cdbbc4eb53f6565732fe93b3a421c000201010b00ba33bfff55095e77d2000200090000a0dec5adc935360007d6745dd7680efdd7aedc945e422e743651837fcb352eb1f97e3f88b70ae8096b86d5242306b936f0cd960074b3e437346f8729282033884bd613e498ff0c7d1c000201010b000fb3e02cb4d0c97cd2000200090000a0dec5adc9353600f2d883f0dd4ddce1ce92e1a11b3124a7fad12630c37943c9052ecb9940ae89b87c5ecd5da722c442b26e30d4b925a15392fb890a3471a809d00b5c26569a97e81b000201010b006432025a12983582d2000200090000a0dec5adc9353600a6f100d8636c67b7ca03be3b487938233de47c76d73723dac3ddf13788065567267f2d2e684c2d9a5b694d0d3a67cea9199aec2943b25f96f91c5ff2ba7983c01b000201010b00b9b12387705fa187d2000200090000a0dec5adc935360043222c12addd513f426883d22fdf655f8e75a50b86055f245764222a6ce727363b634fe0ebe734fe232e67d93c31b31875fbd55aefe846be2ec1e5599eabedb21b000201010b000e3145b4ce260d8dd2000200090000a0dec5adc9353600c23988393d2e4ef26eb0391fce05e985b9cbf2c1911f47f0748b194800a62f6475e7177c5b9a147b04dd4325fd3d2822d58318cf0c323e7f4258c031a8af58851c000201010b0063b066e12cee7892d2000200090000a0dec5adc9353600ad4f3c4dbcc6a5679ef9ba07b34aebcc4cf0d48a55fa5f9de114b1ee5bb475160f09e0f3c7a03c8789e6efd30fed28376d4e3e61b80c051cd4c9e2ea50a52ae51c000201010b00b82f880e8bb5e497d2000200090000a0dec5adc9353600a3dcb23c6a610e052ed078a607298817d7d797a135bd22ffac70a30e2e7c9009571e47cee336e09e6f1d0f645832d71f3456c1e6ec79eb249261d3441a7bc9791b000201010b000dafa93be97c509dd2000200090000a0dec5adc93536006e1bc8f22a0a22eef657dd60c99917f8af5406d80b51c928aaf7b4d5d68c0b1b00ad309ea579575f9ab09c1b169f07f813347c34c2cd7ae7739ad74fdd67a7871c000201010b00622ecb684744bca2d2000200090000a0dec5adc93536008778f4c68b3ce18f82625cb8838e1a9204cca55397fe347ec7c9190fdfa194df07041362204e2136561c815a73a698e5c995596750486403b2342adc03174a121c000201010b00b7adec95a50b28a8d2000200090000a0dec5adc93536003a24a06d762b3df6420c6c49d7b17ce2bf362187e0bf5cccebb1ea6a7431363214006467b3ef8844c47b6b39ebb037d1f8508e703ba27160875a2950826753061b000201010b000c2d0ec303d393add2000200090000a0dec5adc9353600637bc020b03e7d5a1981538debf668f87dd37e1ae36f3abe1a2bf0b8ff4590e22b493fbe6054bf2e0d1ad84688c2dcac2216049518ef75dded985625a015bfdc1c000201010b0061ac2ff0619affb2d2000200090000a0dec5adc93536007cce8a1512cdde6930ea4328017467c561f9c43231879cb73e73500e0b81ef357b1232f3f5b4d0691ada2bb34dd3ab3496d7e5f06acc6f8fff3f7d37cc10e9031b000201010b00b62b511dc0616bb8d2000200090000a0dec5adc9353600d12c7ab08dd6a01558f48f2f21b0a7b1cd523b1dd711df2ab3f16cb033d4832325331b9cb2e420cb1b5124a0519679290744e7dff61e18d6ff9fe750ebedb9ad1b000201010b000bab724a1e29d7bdd2000200090000a0dec5adc935360099a05c852b9c0d81bc518d452fe908478fb6c2deb3c30eb2324f8928578d1e76390ff34b4f58ca6432f7427e270dfd8165b1555f3886fee0ddfdf907f2c373e41c000201010b00602a94777cf042c3d2000200090000a0dec5adc9353600cc03086560add48659eb7254031af03f3d315aac717f5dbbb02ed4c237402e031095e42a9e92f584e5587608689c56df9b1c106ef6b92a7e9051657b571318761b000201010b00b5a9b5a4dab7aec8d2000200090000a0dec5adc9353600077d67ace17fce1a1d6e9a5f5f0c30db6a004b86608bf173a36ea8ec07cc30be644931a9ef1f30f4d673f7021035f1068b42883028c00ad9ebd394f5545d32291b000201010b000a29d7d1387f1aced2000200090000a0dec5adc93536001faf7260b88be838b12baf9acd9f4988aca5fe604acdbd9e675831b68403928d2dfe6d297956410b657a3631cfb80dad9cb9d02409558ccff82e4fe2325d1e491c000201010b005fa8f8fe964686d3d2000200090000a0dec5adc9353600f856fe86bab3ebaa10c8ff9e0336ce41f4cc9ef78da685515ce70989cbabca5840817fd6cf4bd28828c3a79d4ab832ac1107fe38624d4d1684dd55f5afb477451c000201010b00b4271a2cf50df2d8d2000200090000a0dec5adc93536000e9475023fca563f0244858c82725f9142465620bbf738bf9d02afce5224bf2b40f82a23f07571397a0b88675e4c72bbea44f84369a36db5961408ed96fb8f871c000201010b0009a73b5953d55dded2000200090000a0dec5adc93536007a8f339aa131f637a6b2f35d1f22f5422c345509fd2e405ede659b1d3149614f194cfcceba2b21c8c93eba88853b1c6fb5caa6e20761db0d91f1a58e145f62851b000201010b005e265d86b19cc9e3d2000200090000a0dec5adc93536002b9ff43c5d9c244928b44b28d3c063c1884bdb96dd4f9d6870735cfd41db566656c80c78eb96a9e93057b2494c53c3be42610dccb4b35c5d7f84e0da730a9c091b000201010b00b3a57eb30f6435e9d2000200090000a0dec5adc93536005486a6dc356a0eff47d59bdd8d55293b95e6758454f172461fd543bdf4a33bcc16eabd295044d2e3db5a10c48eb537ba5e67e45774221c758d57faaca801dc4e1b000201010b000825a0e06d2ba1eed2000200090000a0dec5adc9353600f7b539344d9bc68c9483a73b6b1d6b5b42cf4bce673ef9440d668bf24de4f9dd6ae27d180c4da556fe3b3ea24188d75541cd8628bc8b1e69bee15d44ee74a7081b000201010b005da4c10dccf20cf4d2000200090000a0dec5adc93536009334ca5f27d8b1a9fbf713af6a3e7a5152b53019150a2cab211b4c0a597822947adf03164b19b39a16966f675ff1b6951061187d6709f161a0cb9a610e60f7e91c000201010b00b223e33a2aba78f9d2000200090000a0dec5adc93536005124f303dd12e92459358917332bb94466e54dcfd4d57f81e74496183b0728e735534ca93892dda63b90381357014c4aeb90eba20cba232ce48d37aacbcefdbb1b000201010b0007a304688881e4fed2000200090000a0dec5adc9353600c6c94ca5033c904d5c00cbfa52b5269a6aee1c75ad4505132d2d3cc0fd64b1bc35bb960e71d9c3b477b9ca2cf367c6b0b7669247f3288b62693f67764c905d9f1b000201010b005c222695e6485004d3000200090000a0dec5adc93536004d5d9efef44c3e6014488b7991dfa07eb52546d03503955b7576710c7c777d0266f60951c97663de2b6eb7b5708e9113426a23d1def3416a5c815712976db8211b000201010b00b1a147c24410bc09d3000200090000a0dec5adc9353600f43b8b6c532296b604d8cb971b099e15c57353b2c39673e0b283faf95154e6f66a4dafc67f7cca3a3eb9eb5514e4c1871048b363620d7ef309ef22e4af45a7971b000201010b00062169efa2d7270fd3000200090000a0dec5adc93536003233f7fe6c582a0ef1ce002ee7e5303155e38904aa19a48f291e48c300321f5e36912448612409b2bc3074db14009aed8410267ff743f78e9c7cc6026c0652751c000201010b005ba08a1c019f9314d3000200090000a0dec5adc9353600cb6a5dcbe3097aa892f8740c579fab7c5f1a524b5f9ea745957862b0e6333a772bec0564ed0b9452fdb00fd17d826f3e21230dd2af6c96e14e21fbc5069316ef1b000201010b00b01fac495f66ff19d3000200090000a0dec5adc9353600e7aa8b651d384fd7894cc0cf54fded5a0c6c3909c30851b2f045edf2f39e670a25febac6564dcbdc4520b9c352e40519bf313eefed40839c514746a83c5bdc8c1c000201010b00059fcd76bd2d6b1fd3000200090000a0dec5adc9353600c8edc1bf13e7caa67f9074082c22d4b1d884710a9f2e7ccb2298b1f07314e6146ee579f98127e871548efee45542dc4b9c960b6dcaeebd32810a68d8df8b1c841b000201010b005a1eefa31bf5d624d3000200090000a0dec5adc935360028e70383f8ad9de5d0d924a39e43e56a7a52344f58db7486a07127aa01470acd473d45e25fc57ef505d92e02516a96b659d23c00d92d1c4440593274492a46261b000201010b00af9d10d179bc422ad3000200090000a0dec5adc935360032e07e7fdf84aaf06fec6c2b27253c6f974dc54b6af4aa2face9144642ac8ba25c9005eb52146d4fd6dda142f1cdf7cd562a616027fa92be0157ff0da5b284e91b000201010b00041d32fed783ae2fd3000200090000a0dec5adc9353600052e719c4dcc1757cfab66c18a1c14bf9369bf784571eb3d5d1a7f230712fa4a746b34da02e1b89c54b08df0e413bb845af5a36e1d6dee422f472c25c20fd6291b000201010b00599c532b364b1a35d3000200090000a0dec5adc9353600d83b28992028b3ab02c15229aee63577a9ff29197a10d84dcce25f634b5b8e5d0ca43afe70264677ac79eb6532b252eccf10e75b0242f2e385d383c3184697ea1b000201010b00ae1b75589412863ad3000200090000a0dec5adc93536005b0ba27d71ab2e9a35acf824ef0b8e24ddfd64317495e2db1938d0075ac855822f8564cc70e3f5b013bdce32ba5ef3f35a4cfc75ea12ad1c613c1c21e6eb56481b000201010b00039b9685f2d9f13fd3000200090000a0dec5adc93536002d1f83a9b6d6c08e8905e35226f74bfa5c2d2bbaeaf75c8b219f30c1ba0f2ce5088a79ba08eceb0fa0d738027195ce0af71c5d905956b80f3199d66e584f10771b000201010b00581ab8b250a15d45d3000200090000a0dec5adc9353600f67c899074486f64788f9494f02c803032e6a817274dc253509e7573554ec9f63c65d7b3d6f5c100f4398662bd3871656baead4d4279b7aaa11c26950d49893f1c000201010b00ad99d9dfae68c94ad3000200090000a0dec5adc93536007300194ddf717442ea80165291f5617f9f44c10eb1f86d312376ba4d0262c32c588031b0a5561898e19a9cc5af28df87e3f76485f833551b2eac3cb001386d7d1c000201010b000219fb0c0d303550d3000200090000a0dec5adc9353600727b7dac17e6fcf0c96ebc2a3b4a24129714c0387b76ab1bd2121bc41c855ab1427bc936515e3dd031c445b4d3b4d5ed709e9682020cfa7f266549c15f9743ea1c000201010b0057981c3a6bf7a055d3000200090000a0dec5adc93536002d641278a7f5310be00820f7196bd54158de933d691998466418d3a997142f633ec816c9fd1ec3409d865ebf957220090f7c035458800121b51f1496b75a79431c000201010b00ac173e67c9be0c5bd3000200090000a0dec5adc93536007d8dc8aedbad9cbbf4b23023d05c67e554bd010edebb5eb22fe4277447bff4e80f4545c912b50027fe9e1b24523eb4eb1a4a6c0fc5fa4f54babc4bfea88bf25c1b000201010b0001975f9427867860d3000200090000a0dec5adc9353600140dbf8f1cee726f0f2b4cd4ae953c781ad1cd607966a046e1babacbda241c0721234afde6bc97f033dbd26978b85b69eb969e18f78b5d32bacfecaf8fda87881c000201010b00561681c1854de465d3000200090000a0dec5adc9353600279e33c5612e4df2565f6df479488058b76640f6766e51b783590eed129b6bc63d346ae77e37bbcca464a06fcfeab8f540727f20ac058e21950b619743f843c61c000201010b00ab95a2eee314506bd3000200090000a0dec5adc93536009d451d8fd9445409c8f0336220cf0b615c172713985f953c1339b351dad2d3723ccd5b2777c35c2cca120a402f22630fa1e979983181912be1dbaff445f4025c1b000201010b000015c41b42dcbb70d3000200090000a0dec5adc9353600ab3951caf0985d5a735de6fee16a11872cef686199b908060f3abaa38ad2f01a76a6c0c4d15da0c38fa34b8a5d8b3e52431cf800b4420c4a0626e7d1234cb0021c000201010b005594e548a0a32776d3000200090000a0dec5adc935360084b8da6af61c73d7075f23673f51ffa5904a944d434373cb1f4253043958ca7904e2d2ae7d3b3ea76a7ca1266f09aa69785aa47f7d956e8b258b53286a7649411b000201010b00aa130776fe6a937bd3000200090000a0dec5adc9353600b6803cad1751a254570a8d38418b7c8712735d8ad305cad396149ab3db91e92e6d79d68690e87b5e7ec80e930498ab9bbcb35090bb769ab1da3766fcf8dda28d1c000201010b00ff9228a35c32ff80d3000200090000a0dec5adc935360069f3bd143ebaa49084f9dc46ec54ff7a727a6ce490188af757eab3985d383b1164724d3446a19a962357d3f78a980267ce075db6f85f5dc0c5f20b280f4c99d21c000201010b0054124ad0baf96a86d3000200090000a0dec5adc935360010ae9f4e6f73c98c67e27c1ab2928e73840c430f40449b37b54174d6106d6b9835f57b89f466fc98ade890d02bc5b91c919b6828448124d37d0c95719a7e882e1b000201010b00a9916bfd18c1d68bd3000200090000a0dec5adc9353600fa1a7e8905e9b7de65054af638e3f4e29a6c763cc09f9b041adf9fbb5aeb9969313ec53687816a029fb372a0800dcdfddbbf557f2db17a9bb792182c0b6ca3c41c000201010b00fe108d2a77884291d3000200090000a0dec5adc9353600ee70933d32f38b3362e174a65f02b6016bb4cba0676836236f040ca24f96026c7dca351841cfddcbabb146db9ff98324cd12ea0105fd7cc6f6d02c381eec95d41c000201010b005390ae57d54fae96d3000200090000a0dec5adc9353600fbde9484c2447b56983088fcbe7df5bb181c50af783376db6c045d6c2af781f2083eed19c54f3d5880823fcfaf2e33017559045e71e607e2d363f97469487e8c1c000201010b00a80fd08433171a9cd3000200090000a0dec5adc9353600ba24adc483c17cb9084f599c3151c7a026f0a86fbf72167bfac17c0fa1ebd29d26dd3fb61d49abeb46da6acb0541fe9d3f0807e87a2a4e1f1f28c53935843b491c000201010b00fd8ef1b191de85a1d3000200090000a0dec5adc9353600a229b11458c2e51d63ee9b1010ff56aee2e5d47158bccc4225798f8e56387d53067a7da84a41e7ab68cdf4796a4b9fcf809bbda5943a569571779f60151b6e681c000201010b00520e13dfefa5f1a6d3000200090000a0dec5adc935360042282b2fb6a9650e8855eaff282fe4ebbec51b0250c80b87fabb6591cfd0e85640fb41b30eb195db5368e8aaaf83cf67335e44f65f2470e1a71ca94ef1e708321b000201010b00a78d340c4e6d5dacd3000200090000a0dec5adc9353600bf20f56a7b2c0ceffd4165c27f39ad56f325cc34bcb210096b90202b346a278e7181edbcd505bcaf80d8585451d6cde9798c537868fa1ad1d785d23caca885411b000201010b00fc0c5639ac34c9b1d3000200090000a0dec5adc93536003ac6ba27986f04c92f4c92d4d7f8d0729d4c2b66a7c38c2d80a6a714ac387cff45b184b6570503bdfa6e3dc9f18644c62ad61e239faf0b656d99766879174d1f1c000201010b00518c77660afc34b7d3000200090000a0dec5adc935360023617d49072ca52fc0a27fe70f598211a12bdc5efda355417d654c2a83201175302c7d93e292b2a0c4055d0d86d958bebe319940d12e21f6e938f034022645f61c000201010b00a60b999368c3a0bcd3000200090000a0dec5adc935360021907a742b6ed1f3bad0713207f177f1cd0404d574ea5a95b482cc3a30223c8a5d6d42f5397ed49ba91e88fe2fb885386ffe2c071574d24adb3ad69421e0e4ed1c000201010b00fb8abac0c68a0cc2d3000200090000a0dec5adc9353600905e95596084605987b7133bf382568778435d6ad355a2be6cc5ff4d5e429ab462607ebb7e908601ff4e04e04317c561b1074e8651d68db81b431e4d81058cf41b0002040102756f08000064a7b3b6e00d020008000064a7b3b6e00d000100010301ffff50e1605b6f302850694291eb0e688ef156779a57bb8833ec7ff43d2a433f62490219d4caed40ebccdac78b2b8cb480db3b070f70d03efbd3ded9c7126c5a8459fa29e287f1db7ff581307265fa77cf947b8e1c0081d8c4bd7500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000184309ea942d2cec813462b7f27a48c9ef0dd59a09038a666e96417fdcf8d8ab64d1ff9b20803f3d6469aadb9c47d390bff3ef5d2fb38d246ea563be40c650b891b0101050202756f02554fff0200010302ffff50e1605b6f302850694291eb0e688ef15677b5136677c0278d416d6315e16525deb791316cf0fb79d1fe8aa3968edd37ff9d405bc8c99224d0e566454537d4916078147704cc6be4b90e8edef440fd883a7e1b00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000300010303ffff50e1605b6f302850694291eb0e688ef156779bac4b063d7c9c8f4f0709fe68cdd88d75b449155bf2060c56a19df3953779a55b30692a56fe0d636ca4a479d0fa6741d59b83ef241bc0504a0669da808fbf861c00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400010304ffff50e1605b6f302850694291eb0e688ef156773759a80048bae46a58ba270b7a6f3c52e6e7d0f353503ad1da36e26bda6e6d7437eeb2eac443c0936502aebfee1e9bd8a21e76c4d9496b07a84aa570e77edbc01c00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500010305ffff50e1605b6f302850694291eb0e688ef1567795d9b64fea4460a538fc8ddd92f2f2b729a1a9ddc36a623e5f9e0898e3dc98700d3deea16b624fac129129f8196f0ec7b05f4b4fd690fe43f350deda65d82e341c00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600010306ffff50e1605b6f302850694291eb0e688ef156777f1c49d89db778c835f326c0a3379f76e1d65105d81c266b93cba569c7117006348f8adb75d1ed18e1638b9be6b83f5b07d89c2d7a4997bf42c89536344b4f1b1b00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000700010307ffff50e1605b6f302850694291eb0e688ef15677f13394fdb869919970a7a94e9b14a33dee30e5e8dcc3d2713be09c857bced1ec2e7ef0ae455f4538d594ff10d6a2c68aac5887917bb759d3842e1e561e70a14e1b00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800010208ffff50e1605b6f302850694291eb0e688ef15677088bd6ae8282f4e436ef9fc5497448bbbe9b8f5fc0bb6f07b3a121ba51887caf717994627790fc843cc0031dfc1d58a3f2dc11acac8f28c724df0b66b3fd3b3c1b0001000000000000000000000000000000000000000000000000000000000000000000017e7a9f8b000000000000000000000900010209ffff50e1605b6f302850694291eb0e688ef156779a09ad8f4e3dc5c5c0fca0e2ab74d9ce69b21b2490fa577ad9beb78ef36bb24846a5957c04452c0513422b3924b9eb96ad3fc805672c95e279631b14567813721b0001000000000000000000000000000000000000000000000000000000000000000081d8c4bd7501c342a6ec000000000000000000000a0001020affff50e1605b6f302850694291eb0e688ef156771fdf209252f5fa69c549614a42f06ec301f07feee772fadbe6a57a83726db3121c5bc792a160bc25b1149f6d289431309633152aec094e0c5d5ae0ec9f72289a1c000100000000000000000000000000000000000000000000000000000000000000000101b1bea5f9000000000000000000000b0001020bffff50e1605b6f302850694291eb0e688ef15677737563a87a60ec1bb177025f18c1ad2e5e759dad3efe123e04c1e1a4289057ae2ca54f82087edf62147cca470fad1077807ed13903e2d9029223e8338f1bbd251b000100000000000000000000000000000000000000000000000000000000000000000101919ac35d000000000000000000000c0001020cffff50e1605b6f302850694291eb0e688ef156773fac1f7f0253a3604516b9d764f01ab675714409dbdb187fc99bbea02ddefe5664bdda7ca58cf4d71b6090a86aa6335cf48afb794537f444467d4aad306962f81b00010000000000000000000000000000000000000000000000000000000000000000010150636575000000000000000000000d0001020dffff50e1605b6f302850694291eb0e688ef15677cd0125221dfad9d253cf5e8b9c03458fc51bd9e32d6fe75066115261d569224211b984d3cb87abd391cecc88bd15b8f418aef4ca5de1d28637db9c2dafa351371b0001000000000000000000000000000000000000000000000000000000000000000001010372cf80000000000000000000000e0001020effff50e1605b6f302850694291eb0e688ef156776f78b6c740d763ed25d2bfaa76e40d19863e6063a700a58bf3d418f9dd75ad8f030c1551e5960038eb2db3814bb503da8c796de6e76c43bc09f2eb4a5e5987691c00010000000000000000000000000000000000000000000000000000000000000000010104a65c32000000000000000000000f0001020fffff50e1605b6f302850694291eb0e688ef15677769caa6cf72d86eb4710545370e1da58d16548bb90218c615867d406ff7c142c0d60c3c9bf915dbcc45a41c7b451032da2d3ce6a93a1203552814b9935b5fb691c0001000000000000000000000000000000000000000000000000000000000000000001013d091206000000000000000000001000010210ffff50e1605b6f302850694291eb0e688ef156772178c584651cc3bf1ca7e891d2fa14874ecb2f7b2efba2a7f18b7bc401bd07cd46071d36eebca24eb77fdc715beb451b5a2101aa546455ff72c94a1ae8b46baa1c000188227b41e9f10b2956fdd8e0596ec803a3ee643aea1055f90b01a4dc0f046cc7010000000000000001000038a7a3cb80ec769c632b7b3e43525547ecd10000001100020211ffff50e1605b6f302850694291eb0e688ef15677f7515c063bb03bbfccc7c9a28a323f9ebfe827fdc2ea38e8dd45380615f722f0070c5141d88c3239682fff537f66c25c7b0bc5f62fa81b9a094e0d5d55a49af31c000121e0de724d16b100f334f1fd1cc20feb3e536c4a3f0e9ea01596be5ff519ab230100000000000000000000000211000038a7a3cb80ec769c632b7b3e43525547ecd1f4000d507b2e45b970ee116c234f44d68afa362a8e1c887bc6d81c1e356d68b97285e80a8b9ad92a46c89d0775f554698143640189156307069111ff625914cc1c000121e0de724d16b100f334f1fd1cc20feb3e536c4a3f0e9ea01596be5ff519ab230100000000000000000000001200020212ffff50e1605b6f302850694291eb0e688ef15677430541fde20c3722623d4741ae5fe694d951bbf89cfc8db5cb61b8cc1cd3dbf33a3fb51ea0dd649ce209bf0ed1a7023a43d2bdd149c8bcc8621010fa793113641b00018d907d6c08d2832a6cd4df43625a65d13b4b110aaff968aeeb473bbfbd1ec65e0100000000000000000000000212000038a7a3cb80ec769c632b7b3e43525547ecd1f07fe9d7483270b091ed632ad26181fc3706fc31a53e14f70de9589941d0c37e35d3612ce8f95e1524228ffc18d0f66d7dab97425873949f100b74836d70c2b21b00018d907d6c08d2832a6cd4df43625a65d13b4b110aaff968aeeb473bbfbd1ec65e0100000000000000000000001300020213ffff50e1605b6f302850694291eb0e688ef15677e9e875de28da01f83360c2db5a36ea9e5033168ae57f2d5467631efc1e98d0a90a5b56944ebc5cce37630ed53919064914ca8802e2c5c95e15d1689c75c1bc371c0001f79260407b56b795b20ce13f36354f64527e2bc4975396f820a9a88b4035fb300100000000000000000000000213000038a7a3cb80ec769c632b7b3e43525547ecd1fea2f960b3efdea53bfd83bee8929c5985749daa37519f3ee61a681a2d6515c304a685388e12b87573b53af9232b12baea20fbd8d28bab199be10ef580c488d21c0001f79260407b56b795b20ce13f36354f64527e2bc4975396f820a9a88b4035fb300100000000000000000000001400020214ffff50e1605b6f302850694291eb0e688ef156770d434715ed1a5304ae221228e9104cb41c5a44e96c930638221bf636701fcdba54405a6ed98f8b280bb2c75abbd0b3afd1c66084a5338c72bc224944b3f385361b000119bf91e59479810fd6ef791e9c012fc66ad23c71483cef8d3b074d67768d60af0100000000000000000000000214000038a7a3cb80ec769c632b7b3e43525547ecd13d94c36ae55711ca45b1ebb48f04e9d8b0c0bfe6fc1cc59fc2e1e9d866d9c4f567aa7e3cdee00a84c4c6621b18d3d332b876f5c3afc472b37dbb981478c5b5591c000119bf91e59479810fd6ef791e9c012fc66ad23c71483cef8d3b074d67768d60af0100000000000000000000001500020215ffff50e1605b6f302850694291eb0e688ef1567791716b9b1ed6ea8676c1cf14d2ee2dacf0713b14d179a2ff5ec54579079052a701fc8849f36be299ac8ca2ef84d591367bd9f13fb98538f04cd701cc1ea3f2011c0001e4318d1a7f6618b04686a9dababb17a480fda8014e6e36bde6afa89c33783c8a0100000000000000000000000215000038a7a3cb80ec769c632b7b3e43525547ecd1ed330f92cb0c3697e3da5a7a0463b98eb70245cdfc54792378daf54da9460d296e89cffec76a3621586ec3221a0025b626edfb7c9ace787382301cf0da7825e21b0001e4318d1a7f6618b04686a9dababb17a480fda8014e6e36bde6afa89c33783c8a0100000000000000000000001600020216ffff50e1605b6f302850694291eb0e688ef15677b9f994add9d98a044d6ac90de51dcc091b8638a9470d50e581fcd6142ec1db2c278dca4e9557c91953fe9c18b477f4d68728717ad466187816b418d51a98bd7c1b0001590f04c3a8830ef9e7635e0a9ee91614e4379cc56e1389acdd16dcbc426ce8150100000000000000000000000216000038a7a3cb80ec769c632b7b3e43525547ecd188e12eb60a55a0c73090c8fb851070ea10f9580725ac07c50cb74c0d17bf8fa21012677aa163130aa86ee3c4d415be6d29251111f84fccf349697e607ab5e4db1b0001590f04c3a8830ef9e7635e0a9ee91614e4379cc56e1389acdd16dcbc426ce8150100000000000000000000001700020217ffff50e1605b6f302850694291eb0e688ef1567710e621894e79ed746951bfba3ac401c30175baf068463fbf9e851ea039f0da3c09c779ebd9d24af34651a3c6ac9cc77ad25c8752f07b8364ec2b15c254b20c4e1b0001b08e2933446f852b29c0ba882cdfbc7d54d59af54449c3bdbdf191e334751b910100000000000000000000000217000038a7a3cb80ec769c632b7b3e43525547ecd1d50c1f2ca7d5ce83d44635b372d194ce720e0f2ec5a6916968a04f17861e52e20f4ff0b805164ca672c0e8b2353a6e28fbc89f11b784df5e09b6af16470e50c91c0001b08e2933446f852b29c0ba882cdfbc7d54d59af54449c3bdbdf191e334751b910100000000000000000000001800020218ffff50e1605b6f302850694291eb0e688ef15677e5c50b663fbc1d642e25cd017698956abeb069adca5b25eaa554374be5aa594a2c971db5ae3b3faf6a71f027a2a45d1245f78cb330fdd15594654499d2c9962d1b000177cc37ccbd4d51a8c7d053aec3d0137422c922ed69948995dcac6dc1572827a101000001000038a700000000000000000218000038a7a3cb80ec769c632b7b3e43525547ecd19a0730e67fa2510b100f5a18cb13b6615aa06a51eff1a36f80533f68f0b59cc008a9a580c4ded5bc4f0c77cb8e325a095259507ef37f8f344ba9669f8291b0b31c000177cc37ccbd4d51a8c7d053aec3d0137422c922ed69948995dcac6dc1572827a101000001000038a70000000000000000"},
											};

		public Round						LastConfirmedRound;
		public Round						LastCommittedRound;
		public Round						LastNonEmptyRound	=> Rounds.FirstOrDefault(i => i.Blocks.Any()) ?? LastConfirmedRound;
		public Round						LastPayloadRound	=> Rounds.FirstOrDefault(i => i.Blocks.Any(i => i is Payload)) ?? LastConfirmedRound;

		public ColumnFamilyHandle			RoundsFamily	=> Engine.GetColumnFamily(nameof(Rounds));

		public static int					GetValidityPeriod(int rid) => rid + Pitch;

		public Database(Settings settings, Log log, INas nas, Vault vault, RocksDb engine)
		{
			Settings = settings;
			Log = log;
			Engine = engine;

			///GenerateFathers(256);

			Accounts = new (this);
			Authors = new (this);
			Products = new (this);
			Realizations = new (this);
			Releases = new (this);

			BaseState = Engine.Get(BaseStateKey);

			if(BaseState != null)
			{
				var r = new BinaryReader(new MemoryStream(BaseState));
		
				LastCommittedRound			= new Round(this){Id = r.Read7BitEncodedInt()};
				LastCommittedRound.Hash		= r.ReadSha3();
				LastCommittedRound.Time		= r.ReadTime();
				LastCommittedRound.WeiSpent	= r.ReadBigInteger();
				LastCommittedRound.Factor	= r.ReadCoin();
				LastCommittedRound.Emission	= r.ReadCoin();
				LastCommittedRound.Members	= Members = r.ReadList<Member>();
				LastCommittedRound.Funds	= Funds = r.ReadList<Account>();

				LoadedRounds.Add(LastCommittedRound.Id, LastCommittedRound);

				Hashify();

				if(!BaseHash.SequenceEqual(Engine.Get(__BaseHashKey)))
				{
					throw new IntegrityException("");
				}
			}

			if(Settings.Database.Chain)
			{
				var chainstate = Engine.Get(ChainStateKey);

				if(chainstate == null)
				{
					Rounds.Clear();
	
					var ips = nas.GetInitials(settings.Zone).ToArray();
	
					if(Settings.Dev.GenerateGenesis)
					{
						var s = new MemoryStream();
						var w = new BinaryWriter(s);

						void write(int rid)
						{
							var r = FindRound(rid);
							r.ConfirmedPayloads = r.Payloads.ToList();
							r.Hashify(r.Id > 0 ? FindRound(rid - 1).Hash : Cryptography.ZeroHash);
							r.Write(w);
						}
	
						var jr = new MembersJoinRequest(this)
									{
										RoundId	= Pitch,
										IPs		= new [] {ips[0]}
									};

						jr.Sign(Settings.Secret.Fathers[0]);
						jr.Write(w);

						var b0 = new Payload(this)
									{
										RoundId		= 0,
										TimeDelta	= 0,
										Reference	= RoundReference.Empty,
									};

						var t = new Transaction(Settings, Settings.Secret.OrgAccount);
						t.AddOperation(new Emission(Settings.Secret.OrgAccount, Web3.Convert.ToWei(1, UnitConversion.EthUnit.Ether), 0){ Id = 0 });
						t.AddOperation(new AuthorBid(Settings.Secret.OrgAccount, "uo", 1){ Id = 1 });
						t.Sign(Settings.Secret.GenAccount, 0);
						b0.AddNext(t);
						
						void emmit(Dictionary<Account, AccountEntry> accs)
						{
							for(int i = 0; i < ips.Length; i++)
							{
								for(int j = 0; j < Zone.GeneratorsPerIP; j++)
								{
									var f = Settings.Secret.Fathers[i * Zone.GeneratorsPerIP + j];
						
									var t = new Transaction(Settings, f);
									t.AddOperation(new Emission(f, Web3.Convert.ToWei(1000, UnitConversion.EthUnit.Ether), 0){ Id = 0 });
									
									if(accs != null)
									{
										t.AddOperation(new CandidacyDeclaration(f, accs[f].Balance - 1){ Id = 1 });
									}

									t.Sign(Settings.Secret.GenAccount, 0);
	
									b0.AddNext(t);
								}
							}

							b0.Sign(Settings.Secret.GenAccount);
							Add(b0, true);
						}
						
						emmit(null);

						Execute(Rounds.First(), Rounds.First().Payloads, null);
						var accs = Rounds.First().AffectedAccounts;
						Rounds.Clear();
						b0.Transactions.Clear();
						b0.AddNext(t);

						emmit(accs);

						b0.FundJoiners.Add(Settings.Secret.OrgAccount);
	
						write(0);
						
						for(int i = 1; i < Pitch; i++)
						{
							var b = new Payload(this)
									{
										RoundId		= i,
										TimeDelta	= i == 1 ? ((long)TimeSpan.FromDays(365).TotalMilliseconds + 1) : 1,  //new AdmsTime(AdmsTime.FromYears(datebase + i).Ticks + 1),
										Reference	= RoundReference.Empty,
									};
	
							if(i == 1)
							{
								t = new Transaction(Settings, Settings.Secret.OrgAccount);
								t.AddOperation(new AuthorRegistration(Settings.Secret.OrgAccount, "uo", "UO", 255){ Id = 2 });
								t.Sign(Settings.Secret.GenAccount, i);
								b.AddNext(t);
							}
								
							b.Sign(Settings.Secret.GenAccount);
							Add(b, false);
	
							write(i);
						}
	
						Add(jr, false);

						for(int i = Pitch; i <= LastGenesisRound; i++)
						{
							var p = GetRound(i - Pitch);
	
							var b = new Vote(this)
									{
										RoundId		= i,
										TimeDelta	= 1,  //new AdmsTime(AdmsTime.FromYears(datebase + i).Ticks + 1),
										Reference	= ReferTo(p)
									};
		
							if(i == Pitch * 2)
								b.Joiners.Add(Settings.Secret.Fathers[0]);
	
							b.Sign(Settings.Secret.GenAccount);
							Add(b, false);
	
							if(i > LastGenesisRound - Pitch)
							{
								var v = new Vote(this)
										{
											RoundId		= i,
											TimeDelta	= 1,  //new AdmsTime(AdmsTime.FromYears(datebase + i).Ticks + 1),
											Reference	= ReferTo(p)
										};
	
								v.Sign(Settings.Secret.Fathers[0]);
								Add(v, false);
							}

							write(i);
						}
						
						var g = s.ToArray().ToHex();
						
						if(g != Genesises.Find(i => i.Zone == Settings.Zone && i.Crypto.GetType() == Cryptography.Current.GetType()).Rounds)
							throw new IntegrityException("Genesis update needed");
						
						Rounds.Clear();
						JoinRequests.Clear();
					}
	
					var rd = new BinaryReader(new MemoryStream(Genesises.Find(i => i.Zone == Settings.Zone && i.Crypto.GetType() == Cryptography.Current.GetType()).Rounds.HexToByteArray()));

					var jr0 = new MembersJoinRequest(this);
					jr0.Read(rd);
						
					for(int i = 0; i <= LastGenesisRound; i++)
					{
						var r = new Round(this);
						r.Read(rd);
						r.Voted = true;
		
						Rounds.Insert(0, r);
				
						if(i == jr0.RoundId)
						{
							Add(jr0, false);
						}

						if(i == Pitch * 2)
						{
							r.ConfirmedJoiners.Add(SecretSettings.Father0);
							r.ConfirmedFundJoiners.Add(SecretSettings.Org);
						}
	
						foreach(var p in r.Payloads)
							p.Confirmed = true;
	
						if(r.Id > 0)
							r.Time = CalculateTime(r, r.Unique);
	
						if(i <= LastGenesisRound - Pitch)
							Confirm(r, true);
					}


					//jr0.Read(new BinaryReader(new MemoryStream(Genesises.Find(i => i.Zone == Settings.Zone && i.Crypto.GetType() == Cryptography.Current.GetType()).JoinRequest.HexToByteArray())));
	
					if(!Rounds.All(i => i.Payloads.All(i => i.Transactions.All(i => i.Operations.All(i => i.Error == null)))))
					{
						throw new IntegrityException("Genesis construction failed");
					}
				}
				else
				{
					var rd = new BinaryReader(new MemoryStream(chainstate));

					var lcr = FindRound(rd.Read7BitEncodedInt());
					
// 					w.Write(round.Time);
// 					w.Write(round.WeiSpent);
// 					w.Write(round.Factor);
// 					w.Write(round.Emission);
// 					w.Write(Members);
// 					w.Write(Funds);

					//LastConfirmedRound			= FindRound();

					for(int i = lcr.Id - lcr.Id % TailLength; i <= lcr.Id; i++)
					{
						var r = FindRound(i);

						Rounds.Insert(0, r);
		
						r.Confirmed = false;
						Confirm(r, true);
					}

					//lcr.Time		= rd.ReadTime();
					//lcr.WeiSpent	= rd.ReadBigInteger();
					//lcr.Factor		= rd.ReadCoin();
					//lcr.Emission	= rd.ReadCoin();
					//Members			= rd.ReadList<Member>();
					//Funds			= rd.ReadList<Account>();

					//Members = LastConfirmedRound.Members;
					//Funds = LastConfirmedRound.Funds;
				}
			}
		}

		public void Add(Block b, bool execute = true)
		{
			var r = GetRound(b.RoundId);

			b.Round = r;

			if(b is Vote)
			{
				r.Blocks.Add(b);
				r.Blocks = r.Blocks.OrderBy(i => i is Payload p ? p.OrderingKey : new byte[] {}, new BytesComparer()).ToList();
	
				if(b is Payload p)
				{
					foreach(var t in p.Transactions)
						foreach(var o in t.Operations)
							o.Placing = PlacingStage.Placed;

					if(execute)
	 					for(int i = r.Id; i <= LastPayloadRound.Id; i++)
	 					{
	 						var ir = GetRound(i);
	 						
	 						if(ir.Payloads.Any() && ir.Previous != null)
							{
								ir.Time = CalculateTime(ir, ir.Payloads);
								Execute(ir, ir.Payloads, null);
							}
	 						else
	 							break;
	 					}
				}
	
				if(r.FirstArrivalTime == DateTime.MaxValue)
				{
					r.FirstArrivalTime = DateTime.UtcNow;
				} 
	
			}

			if(b is MembersJoinRequest jr)
			{
				//jr.Bail = Accounts.Find(jr.Generator, b.RoundId - Pitch).Bail;
				JoinRequests.Add(jr);
			}
	
			BlockAdded?.Invoke(b);
		}

		public void Add(IEnumerable<Block> bb)
		{
			foreach(var i in bb)
			{
				Add(i);
			}
		}

		public bool Verify(Block b)
		{
			if(LastConfirmedRound != null && b.RoundId <= LastConfirmedRound.Id)
				return false;

			var r = FindRound(b.RoundId);
	
			if(r != null && r.Blocks.Any(i => i.Signature.SequenceEqual(b.Signature)))
				return false;

			if(JoinRequests.Any(i => i.Signature.SequenceEqual(b.Signature)))
				return false;
		
			return b.Valid;
		}

		public Round GetRound(int rid)
		{
			var r = FindRound(rid);

			if(r == null)
			{	
				r = new Round(this) {Id = rid};
				//r.LastAccessed = DateTime.UtcNow;
				Rounds.Add(r);
				Rounds = Rounds.OrderByDescending(i => i.Id).ToList();
			}

			return r;
		}

		public Round FindRound(int rid)
		{
			foreach(var i in Rounds)
				if(i.Id == rid)
				{
					//i.LastAccessed = DateTime.UtcNow;
					return i;
				}

			if(LoadedRounds.ContainsKey(rid))
			{
				var r = LoadedRounds[rid];
				//r.LastAccessed = DateTime.UtcNow;
				return r;
			}

			var d = Engine.Get(BitConverter.GetBytes(rid), RoundsFamily);

			if(d != null)
			{
				var r = new Round(this);
				r.Id			= rid; 
				r.Voted			= true; 
				r.Confirmed		= true;
				//r.LastAccessed	= DateTime.UtcNow;

				r.Load(new BinaryReader(new MemoryStream(d)));
	
				LoadedRounds[r.Id] = r;
				//Recycle();
				
				return r;
			}
			else
				return null;
		}

		void Recycle()
		{
			if(LoadedRounds.Count > TailLength * 10)
			{
				foreach(var i in LoadedRounds.OrderByDescending(i => i.Value.Id).Skip(TailLength * 10))
				{
					LoadedRounds.Remove(i.Key);
				}
			}
		}

		public IEnumerable<Member> VoterOf(Round r)
		{
			return Members.Where(i => i.JoinedAt < r.Id);
		}

		public IEnumerable<Account> ProposeJoiners(Round round)
		{
			var o = JoinRequests.Where(i => i.RoundId == round.ParentId)
								.Select(jr =>{
												var a = Accounts.Find(jr.Generator, LastConfirmedRound.Id);
												return new {jr = jr, a = a};
											})	/// round.ParentId - Pitch means to not join earlier than [Pitch] after declaration, and not redeclare after a join is requested
								.Where(i => i.a != null && 
											i.a.CandidacyDeclarationRound <= round.Id - Pitch * 2 &&  /// 2 = declared, requested
											i.a.Bail >= (Settings.Dev != null && Settings.Dev.DisableBailMin ? 0 : BailMin))
								.OrderByDescending(i => i.a.Bail)
								.ThenBy(i => i.a.Account)
								.Select(i => i.jr);

			var n = Math.Min(MembersMax - Members.Count, o.Count());

			//.Where(i =>	{ 
			//				var d = Accounts.FindLastOperation<CandidacyDeclaration>(i, null, null, null, r => r.Id <= round.Id);
			//				return d != null && d.Transaction.Payload.RoundId <= round.Id - Pitch*2 && d.Bail >= (Settings.Dev != null && Settings.Dev.DisableBailMin ? 0 : BailMin); 
			//			})

			return o.Take(n).Select(i => i.Generator);
		}

		public IEnumerable<Account> ProposeLeavers(Round round, Account generator)
		{
			var joiners = ProposeJoiners(round);

			var leavers = VoterOf(round).Where(i =>	i.JoinedAt < round.ParentId &&
													Rounds.Count(r =>	round.ParentId <= r.Id && r.Id < round.Id &&					/// in previous Pitch number of rounds
																		r.Votes.Any(b => b.Generator == i.Generator)) < Pitch * 2/3 &&	/// sent less than 2/3 of required blocks
													!Enumerable.Range(round.ParentId + 1, Pitch - 1).Select(i => FindRound(i)).Any(r => r.Votes.Any(v => v.Generator == generator && v.Leavers.Contains(i.Generator)))) /// not yet reported in prev [Pitch-1] rounds
										.Select(i => i.Generator);

			//if(!o.Any() && Members.Count == MembersMax && joiners.Any())
			//	leavers = Members.OrderByDescending(i => i.JoinedAt).ThenBy(i => i.Generator).Take(joiners.Take(MembersRotation).Count()).Select(i => i.Generator);
			//else
			//	leavers = o;

			return leavers;
		}

		public bool QuorumReached(Round r)
		{
			var members = VoterOf(r).Select(i => i.Generator);

			var n = r.Unique.Count(i => members.Contains(i.Generator));
			
			var q = members.Count() * 2 / 3;

			if(members.Count() * 2 % 3 != 0)
				q++;

			return q <= n;
		}

		public bool QuorumFailed(Round r)
		{
			var max = VoterOf(r).Select(i => i.Generator);

			return r.Unique.Count() >= Math.Max(1, max.Count() * 2/3) && r.Majority.Count() + (max.Count() - r.Unique.Count()) < Math.Max(1, max.Count() * 2/3);
		}

		public ChainTime CalculateTime(Round round, IEnumerable<Vote> votes)
		{
 			if(round.Id == 0)
 			{
 				return round.Time;
 			}

 			if(!votes.Any())
 			{
				return round.Previous.Time + new ChainTime(1);
			}

			///var t = 0L;
			///var n = 0;
			///
			///for(int i = Math.Max(0, round.Id - Pitch + 1); i <= round.Id; i++)
			///{
			///	var r = FindRound(i);
			///	t += r.Payloads.Sum(i => i.Time.Ticks);
			///	n += r.Payloads.Count();
			///}
			///
			///t /= n;

			votes = votes.OrderBy(i => i.Generator);

			return round.Previous.Time + new ChainTime(votes.Sum(i => i.TimeDelta)/votes.Count());
		}

		public IEnumerable<Transaction> CollectValidTransactions(IEnumerable<Transaction> txs, Round round)
		{
			//txs = txs.Where(i => round.Id <= i.RoundMax /*&& IsSequential(i, round.Id)*/);

			if(txs.Any())
			{
// 				var p = new Payload(this);
// 				p.Member	= Account.Zero;
// 				p.Time		= DateTime.UtcNow;
// 				p.Round		= round;
// 				p.TimeDelta	= 1;
// 					
// 				foreach(var i in txs)
// 				{
// 					p.AddNext(i);
// 				}
// 				
//  				Execute(round, new Payload[] {p}, null);
 	
 //				txs = txs.Where(t => t.SuccessfulOperations.Any());
			}

			return txs;
		}

		///public bool IsSequential(Operation transaction, int ridmax)
		///{
		///	var prev = Accounts.FindLastOperation(transaction.Signer, o => o.Successful, t => t.Successful, null, r => r.Id < ridmax);
		///
		///	if(transaction.Id == 0 && prev == null)
		///		return true;
		///
		///	if(transaction.Id == 0 && prev != null || transaction.Id != 0 && prev != null && prev.Id != transaction.Id - 1)
		///		return false;
		///
		///	/// STRICT: return prev != null && (prev.Payload.Confirmed || prev.Payload.Transactions.All(i => IsSequential(i, i.Payload.RoundId))); /// All transactions in a block containing 'prev' one must also be sequential
		///	return prev.Transaction.Payload.Confirmed || IsSequential(prev, prev.Transaction.Payload.RoundId);
		///}

		public RoundReference ReferTo(Round round)
		{
			//if(round.Id < Pitch)
			//	return RoundReference.Empty;

			if(round.Id > LastGenesisRound && !round.Parent.Confirmed)
				return null;

			//if(!round.Payloads.Any())
			//	return null;

			var choice = round.Payloads;
			//var nonempties = choice.Where(i => i.SuccessfulTransactions.Any());

			/// take only blocks with valid transactions or take first empty block 
			var pp = (choice).OrderBy(i => i.OrderingKey, new BytesComparer());
			
			var rr = new RoundReference();

			rr.Parent		= (round.Id >= Pitch ? round.Parent.Hash : Cryptography.ZeroHash);
			rr.Payloads		= pp.						Select(i => i.Prefix).ToList();
			rr.Violators	= round.ElectedViolators.	Select(i => i.Prefix).OrderBy(i => i, new BytesComparer()).ToList();
			rr.Leavers		= round.ElectedLeavers.		Select(i => i.Prefix).OrderBy(i => i, new BytesComparer()).ToList();
			rr.Joiners		= round.ElectedJoiners.		Select(i => i.Prefix).OrderBy(i => i, new BytesComparer())/*.Take(rr.Leavers.Count + NewMembersPerRoundMax)*/.ToList();
			rr.FundLeavers	= round.ElectedFundLeavers.	Select(i => i.Prefix).OrderBy(i => i, new BytesComparer()).ToList();
			rr.FundJoiners	= round.ElectedFundJoiners.	Select(i => i.Prefix).OrderBy(i => i, new BytesComparer()).ToList();
			rr.Time			= CalculateTime(round, round.Votes);

			return rr; 
		}

		public void Execute(Round round, IEnumerable<Payload> payloads, IEnumerable<Account> forkers)
		{
			var prev = round.Previous;
				
			if(round.Id != 0 && prev == null)
				return;

			foreach(var b in payloads)
				foreach(var t in b.Transactions)
					foreach(var o in t.Operations)
					{
						//o.Successful = false;
						o.Error = null;
					}

			start: 

			round.Emission	= round.Id == 0 ? 0						:  prev.Emission;
			round.WeiSpent	= round.Id == 0 ? 0						:  prev.WeiSpent;
			round.Factor	= round.Id == 0 ? Emission.FactorStart	:  prev.Factor;
			round.Members	= Members.ToList();
			round.Funds		= Funds.ToList();

			round.AffectedAccounts.Clear();
			round.AffectedAuthors.Clear();
			round.AffectedProducts.Clear();
			round.AffectedRealizations.Clear();
			round.AffectedReleases.Clear();

			foreach(var b in payloads.AsEnumerable().Reverse())
			{
				foreach(var t in b.Transactions.AsEnumerable().Reverse())
				{
					Coin fee = 0;

					foreach(var o in t.Operations.AsEnumerable().Reverse())
					{
						if(o.Error != null)
							continue;

						var s = round.AffectAccount(t.Signer);
					
						if(o.Id <= s.LastOperationId)
						{
							o.Error = Operation.NotSequential;
							goto start;
						}
						
						o.Execute(this, round);

						if(o.Error != null)
							goto start;

						var f = o.CalculateFee(round.Factor);
	
						if(s.Balance - f < 0)
						{
							o.Error = Operation.NotEnoughUNT;
							goto start;
						}

						fee += f;
						s.Balance -= f;
						s.LastOperationId = o.Id;
					}
						
					if(t.SuccessfulOperations.Any())
					{
						if(Settings.Database.Chain)
						{
							round.AffectAccount(t.Signer).Transactions.Add(round.Id);
						}

						round.Distribute(fee, new[]{b.Generator}, 9, round.Funds, 1); /// taking 10% we prevent a member from sending his own transactions using his own blocks for free, this could be used for block flooding
					}
				}
			}

			if(round.Id > LastGenesisRound)
			{
				var penalty = Coin.Zero;

				if(forkers != null && forkers.Any())
				{
					foreach(var f in forkers)
					{
						penalty += round.AffectAccount(f).Bail;
						round.AffectAccount(f).BailStatus = BailStatus.Siezed;
					}

					round.Distribute(penalty, round.Members.Where(i => !forkers.Contains(i.Generator)).Select(i => i.Generator), 1, round.Funds, 1);
				}
			}
		}

		public void Hashify()
		{
			BaseHash = Cryptography.Current.Hash(BaseState);
	
			foreach(var i in Accounts.SuperClusters.OrderBy(i => i.Key))		BaseHash = Cryptography.Current.Hash(Bytes.Xor(BaseHash, i.Value));
			foreach(var i in Authors.SuperClusters.OrderBy(i => i.Key))			BaseHash = Cryptography.Current.Hash(Bytes.Xor(BaseHash, i.Value));
			foreach(var i in Products.SuperClusters.OrderBy(i => i.Key))		BaseHash = Cryptography.Current.Hash(Bytes.Xor(BaseHash, i.Value));
			foreach(var i in Realizations.SuperClusters.OrderBy(i => i.Key))	BaseHash = Cryptography.Current.Hash(Bytes.Xor(BaseHash, i.Value));
			foreach(var i in Releases.SuperClusters.OrderBy(i => i.Key))		BaseHash = Cryptography.Current.Hash(Bytes.Xor(BaseHash, i.Value));
		}

		public void Confirm(Round round, bool confirmed)
		{
			if(round.Id > 0 && LastConfirmedRound != null && LastConfirmedRound.Id + 1 != round.Id)
				throw new IntegrityException("LastConfirmedRound.Id + 1 == round.Id");

			if(!confirmed)
			{
				List<T>	confirm<T>(IEnumerable<byte[]> prefixes, Func<Vote, IEnumerable<T>> get, Func<T, byte[]> getprefix)
				{
					var o = prefixes.Select(v => round.Unique.SelectMany(i => get(i)).FirstOrDefault(i => getprefix(i).SequenceEqual(v)));
	
					if(o.Contains(default(T)))
						throw new ConfirmationException("Can't confirm, some references not found", round);
					else 
						return o.ToList();
				}
	
				/// check we have all payload blocks 
	
				foreach(var i in round.Payloads)
					i.Confirmed = false;
	
				var child = FindRound(round.Id + Pitch);
				var rf = child.Majority.First().Reference;
	 	
 				foreach(var pf in rf.Payloads)
 				{
 					var b = round.Unique.OfType<Payload>().FirstOrDefault(i => pf.SequenceEqual(i.Prefix));
 	
 					if(b != null)
 						b.Confirmed = true;
 					else
 						return;
 				}

				round.Time					= rf.Time;
				round.ConfirmedPayloads		= round.Payloads.Where(i => i.Confirmed).OrderBy(i => i.OrderingKey, new BytesComparer()).ToList();
				round.ConfirmedViolators	= confirm(rf.Violators,		i => i.Violators,	i => i.Prefix);
				round.ConfirmedJoiners		= confirm(rf.Joiners,		i => i.Joiners,		i => i.Prefix);
				round.ConfirmedLeavers		= confirm(rf.Leavers,		i => i.Leavers,		i => i.Prefix);
				round.ConfirmedFundJoiners	= confirm(rf.FundJoiners,	i => i.FundJoiners, i => i.Prefix);
				round.ConfirmedFundLeavers	= confirm(rf.FundLeavers,	i => i.FundLeavers, i => i.Prefix);
			}
			else
				round.ConfirmedPayloads		= round.Payloads.ToList();

			Execute(round, round.ConfirmedPayloads, round.ConfirmedViolators);
			
			foreach(var b in round.Payloads)
			{
				foreach(var t in b.Transactions)
				{	
					foreach(var o in t.Operations)
					{	
						o.Placing = (b.Confirmed && o.Error == null) ? PlacingStage.Confirmed : PlacingStage.FailedOrNotFound;
#if DEBUG
						if(o.__ExpectedPlacing != PlacingStage.Null && o.Placing != o.__ExpectedPlacing)
						{
							o.Placing = o.Placing;
						}
#endif
					}

					t.Operations.RemoveAll(i => i.Error != null);
				}

				b.Transactions.RemoveAll(t => !t.Operations.Any());
			}

			//round.Blocks.RemoveAll(b => b is Payload p && !p.Transactions.Any());

			Members.AddRange(round.ConfirmedJoiners	.Where(i => Accounts.Find(i, round.Id).CandidacyDeclarationRound <= round.Id - Pitch * 2)
													.Select(i => new Member {Generator = i, IPs = JoinRequests.First(q => q.Generator == i && q.RoundId == round.Id - Pitch).IPs, JoinedAt = round.Id + Pitch}));

			Members.RemoveAll(i => round.AnyOperation(o => o is CandidacyDeclaration d && d.Signer == i.Generator && o.Placing == PlacingStage.Confirmed));  /// CandidacyDeclaration cancels membership
			Members.RemoveAll(i => round.AffectedAccounts.ContainsKey(i.Generator) && round.AffectedAccounts[i.Generator].Bail < (Settings.Dev.DisableBailMin ? 0 : BailMin));  /// if Bail has exhausted due to penalties (CURRENTY NOT APPLICABLE, penalties are disabled)
			Members.RemoveAll(i => round.ConfirmedLeavers.Contains(i.Generator));
			Members.RemoveAll(i => round.ConfirmedViolators.Contains(i.Generator));
 			round.Members = Members.ToList();

			if(round.Id <= LastGenesisRound || round.Factor == Emission.FactorEnd) /// Funds reorganization only after emission is over
			{
				Funds.AddRange(round.ConfirmedFundJoiners);
				Funds.RemoveAll(i => round.ConfirmedFundLeavers.Contains(i));
 				round.Funds	= Funds.ToList();
			}

			using(var b = new WriteBatch())
			{
				if(Rounds.Count(i => i.Id < round.Id) >= TailLength)
				{
					var tail = Rounds.AsEnumerable().Reverse().Take(TailLength);
	
					foreach(var i in tail)
					{
						Accounts	.Save(b, i.AffectedAccounts.Values);
						Authors		.Save(b, i.AffectedAuthors.Values);
						Products	.Save(b, i.AffectedProducts.Values);
						Realizations.Save(b, i.AffectedRealizations.Values);
						Releases	.Save(b, i.AffectedReleases.Values);
					}

					LastCommittedRound = tail.Last();
	
					var s = new MemoryStream();
					var w = new BinaryWriter(s);
	
					w.Write7BitEncodedInt(LastCommittedRound.Id);
					w.Write(LastCommittedRound.Hash);
					w.Write(LastCommittedRound.Time);
					w.Write(LastCommittedRound.WeiSpent);
					w.Write(LastCommittedRound.Factor);
					w.Write(LastCommittedRound.Emission);
					w.Write(Members.OrderBy(i => i.Generator));
					w.Write(Funds.OrderBy(i => i));
	
					BaseState = s.ToArray();

					Hashify();
									
					b.Put(BaseStateKey, BaseState);
					b.Put(__BaseHashKey, BaseHash);

					foreach(var i in tail)
					{
						if(!LoadedRounds.ContainsKey(i.Id))
						{
							LoadedRounds.Add(i.Id, i);
						}
						
						Rounds.Remove(i);
					}

					Recycle();
				}

				round.Hashify(round.Id > 0 ? round.Previous.Hash : Cryptography.ZeroHash); /// depends on BaseHash 

				if(Settings.Database.Chain)
				{
					var s = new MemoryStream();
					var w = new BinaryWriter(s);

					w.Write7BitEncodedInt(round.Id);

					b.Put(ChainStateKey, s.ToArray());

					s = new MemoryStream();
					w = new BinaryWriter(s);
	
					round.Save(w);
	
					b.Put(BitConverter.GetBytes(round.Id), s.ToArray(), RoundsFamily);
				}

				Engine.Write(b);
			}

			JoinRequests.RemoveAll(i => i.RoundId < round.Id - Pitch);
		
			round.Confirmed = true;
			LastConfirmedRound = round;
		}

		public ProductEntry FindProduct(ProductAddress product, int ridmax)
		{
			foreach(var r in Rounds.Where(i => i.Id <= ridmax))
				if(r.AffectedProducts.ContainsKey(product))
					return r.AffectedProducts[product];

			var e = Products.FindEntry(product);

			if(e != null && (e.LastRegistration > ridmax))
				throw new IntegrityException("maxrid works inside pool only");

			return e;
		}

		public Transaction FindLastPoolTransaction(Func<Transaction, bool> transaction_predicate, Func<Payload, bool> payload_predicate = null, Func<Round, bool> round_predicate = null)
		{
			foreach(var r in round_predicate == null ? Rounds : Rounds.Where(round_predicate))
				foreach(var b in payload_predicate == null ? r.Payloads : r.Payloads.Where(payload_predicate))
					foreach(var t in b.Transactions)
						if(transaction_predicate == null || transaction_predicate(t))
							return t;

			return null;
		}

		public IEnumerable<Transaction> FindLastPoolTransactions(Func<Transaction, bool> transaction_predicate, Func<Payload, bool> payload_predicate = null, Func<Round, bool> round_predicate = null)
		{
			foreach(var r in round_predicate == null ? Rounds : Rounds.Where(round_predicate))
				foreach(var b in payload_predicate == null ? r.Payloads : r.Payloads.Where(payload_predicate))
					foreach(var t in transaction_predicate == null ? b.Transactions : b.Transactions.Where(transaction_predicate))
						yield return t;
		}

		public O FindLastPoolOperation<O>(Func<O, bool> op = null, Func<Transaction, bool> tp = null, Func<Payload, bool> pp = null, Func<Round, bool> rp = null)
		{
			var ops = FindLastPoolTransactions(tp, pp, rp).SelectMany(i => i.Operations.OfType<O>());
			return op == null ? ops.FirstOrDefault() : ops.FirstOrDefault(op);
		}

		IEnumerable<O> FindLastPoolOperations<O>(Func<O, bool> op = null, Func<Transaction, bool> tp = null, Func<Payload, bool> pp = null, Func<Round, bool> rp = null)
		{
			var ops = FindLastPoolTransactions(tp, pp, rp).SelectMany(i => i.Operations.OfType<O>());
			return op == null ? ops : ops.Where(op);
		}

		public Block FindLastBlock(Func<Block, bool> f, int maxrid = int.MaxValue)
		{
			foreach(var r in Rounds.Where(i => i.Id <= maxrid))
				foreach(var b in r.Blocks)
					if(f(b))
						return b;

			return null;
		}

		public IEnumerable<Block> FindLastBlocks(Func<Block, bool> f, int maxrid = int.MaxValue)
		{
			foreach(var r in Rounds.Where(i => i.Id <= maxrid))
				foreach(var b in r.Blocks)
					if(f(b))
						yield return b;
		}

		public IEnumerable<ReleaseRegistration> FindReleases(string author, string product, Func<ReleaseRegistration, bool> f, int maxrid = int.MaxValue)
		{
			var p = FindProduct(new ProductAddress(author, product), maxrid);

			if(p == null)
				yield break;

			foreach(var r in p.Releases.Where(i => i.Rid <= maxrid).Select(i => FindRound(i.Rid).FindOperation<ReleaseRegistration>(o => o.Release.Author == author && o.Release.Product == product && o.Release.Version == i.Version)))
				yield return r;
		}
		
		public AccountInfo GetAccountInfo(Account account, bool confirmed)
		{
			var rmax = confirmed ? LastConfirmedRound : LastNonEmptyRound;

			var a = Accounts.Find(account, rmax.Id);

			if(a != null)
			{
				var i = new AccountInfo();


				i.Balance			= a.Balance;
				i.LastOperationId	= a.LastOperationId;
				//i.Authors			= a.Authors;

				if(Settings.Database.Chain)
				{
					//var t = Accounts.FindLastOperation(account, i => i.Successful, null, null, r => r.Id <= rmax.Id);

					//i.Operations = Accounts.FindLastOperations<Operation>(account, null, null, null, r => r.Id <= rmax.Id).Take(10).Reverse().Select(i => new AccountOperationInfo(i)).ToList();
				}

				return i;
			}

			return null;
		}

		public XonDocument GetAuthorInfo(string author, bool confirmed, IXonValueSerializator serializator)
		{
			var roundmax = confirmed ? LastConfirmedRound : LastNonEmptyRound;

			var a = Authors.Find(author, roundmax.Id);

			if(a != null)
			{
				return a.ToXon(serializator);
			}

			return null;
		}
				
		public QueryReleaseResult QueryRelease(ReleaseQuery query, bool confirmed)
		{
			if(query.VersionQuery == VersionQuery.Latest)
			{
				var roundmax = confirmed ? LastConfirmedRound : LastPayloadRound;
	
				var p = Products.Find(query.Realization, roundmax.Id);
	
				if(p != null)
				{
					var r = p.Releases.Where(i => i.Platform == query.Platform && i.Channel == query.Channel).MaxBy(i => i.Version);
					
					if(r != null)
					{
						var rr = FindRound(r.Rid).FindOperation<ReleaseRegistration>(m =>	(RealizationAddress)m.Release == (RealizationAddress)query.Realization && 
																							m.Release.Version == r.Version);
	
						return new QueryReleaseResult{Registration = rr};
					}
				}

				return null;
			}

			if(query.VersionQuery == VersionQuery.Exact)
			{
				var roundmax = confirmed ? LastConfirmedRound : LastPayloadRound;
	
				var p = Products.Find(query.Realization, roundmax.Id);
	
				if(p != null)
				{
					var r = p.Releases.Find(i => i.Platform == query.Platform && i.Version == query.Version);
					
					if(r != null)
					{
						var rr = FindRound(r.Rid).FindOperation<ReleaseRegistration>(m =>	(RealizationAddress)m.Release == (RealizationAddress)query.Realization && 
																							m.Release.Version == r.Version);
	
						return new QueryReleaseResult{Registration = rr};
					}
				}

				return null;
			}

			throw new ArgumentException("Unsupported VersionQuery");
		}
	}
}
