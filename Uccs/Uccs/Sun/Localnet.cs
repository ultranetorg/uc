using System;
using System.Linq;
using System.Net;
using Nethereum.Signer;
using Uccs.Net;

namespace Uccs.Net
{
	public class Localnet : Zone
	{	
		public override int AnalizerMinimumVotes => 1;

		public Localnet()
		{
			Name				= "Localnet";
			Genesis				
			Father0IP			= new IPAddress(new byte[] {127, 0, 0, 100});
			Cryptography		= Cryptography.No;
			EthereumNetwork		= Chain.Goerli;
			PoW					= false;
			TailLength			= 100;
			BailMin				= 0.000_000_001;

			Initials			= Enumerable.Range(100, 16).Select(i => new IPAddress(new byte[] {127, 0, 0, (byte)i})).ToArray();
		}
	}
}
