using System;
using System.Linq;
using System.Net;
using Nethereum.Signer;
using Uccs.Net;

namespace Uccs.Net
{
	public class Localnet : Zone
	{	
		public override int AnalizerMinimumVotes => 1;

		public Localnet()
		{
			Name				= "Simulation";
			Genesis				= "000001FFFF50E1605B6F302850694291EB0E688EF15677000000000000000000000000D08137D152186A92426F08D608A4FE8948FB0ADBA095ABC6FD03EF66EA6078C600FFFF50E1605B6F302850694291EB0E688EF156770000000000000000000000000000000000000000000000000000000000000000000000000001000038A7A3CB80EC769C632B7B3E43525547ECD10000000000000100000038A7A3CB80EC769C632B7B3E43525547ECD10000000000000000000000007FFEA00190C07579400D53177D5D85693E77DA0EEC4106B8E009E0309A1BB0090000000100000000000000000000000000000000000001020B000000E1AA582AAF2D400100010001FFFF50E1605B6F302850694291EB0E688EF1567700000000000000000000000014A7B39F767667C278F6BBE48430F9DB82BA941FD79457442395ABA16C4C65EC00FFFF50E1605B6F302850694291EB0E688EF15677000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000020001FFFF50E1605B6F302850694291EB0E688EF15677000000000000000000000000680709665B1186B527142F0E3C950728BDF9A5725DA367C6836E842BEE2114D600FFFF50E1605B6F302850694291EB0E688EF15677000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030001FFFF50E1605B6F302850694291EB0E688EF1567700000000000000000000000006DB0404800A548F5FC366CF0B1D56FB53C8011D560DDBA0D32A56D17612FE1000FFFF50E1605B6F302850694291EB0E688EF15677000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040001FFFF50E1605B6F302850694291EB0E688EF15677000000000000000000000000E29638AA8485E2AF0588DF7DEDECD9958376568C90474CF3530BDABFE06CD89400FFFF50E1605B6F302850694291EB0E688EF15677000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000050001FFFF50E1605B6F302850694291EB0E688EF156770000000000000000000000002177D58649532F36A68D774B7B0F0A0B8C83D124C82EE17E3BDF7B1769D94CE100FFFF50E1605B6F302850694291EB0E688EF15677000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060001FFFF50E1605B6F302850694291EB0E688EF15677000000000000000000000000A63A34ACDC53B107A6A196EF3E662F8960D045579D6A37B3257194653C8C54EA00FFFF50E1605B6F302850694291EB0E688EF15677000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000070001FFFF50E1605B6F302850694291EB0E688EF15677000000000000000000000000DC8B04481EBDD654A2796EB3B05025393F05666143719A440FA8723B719693E200FFFF50E1605B6F302850694291EB0E688EF15677000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080001FFFF50E1605B6F302850694291EB0E688EF15677000000000000000000000000BD334B9B43A8B7BDA7292B6219DE4E74CB39CD033769CAC7341347D07EE75CCE00FFFF50E1605B6F302850694291EB0E688EF15677000095D7211585713A6832A50C4D66736A58044FE60C71FA1FFF10BA4B88461BAF050000000000000000000000090001FFFF50E1605B6F302850694291EB0E688EF156770000000000000000000000001F47062800052486DD0B4E7BF96EEF940A9FFA2B4AB55C3E09DFA5340B2BF53400FFFF50E1605B6F302850694291EB0E688EF156770000E084334040AF0CC3C300285AA0F953608AEBB7EB4ED84D95AA7B8B3FDD0F706400000000000000000000000A0001FFFF50E1605B6F302850694291EB0E688EF15677000000000000000000000000EC86FD492B773946F91BB32691C34A917D25AE87A43E34CD1441C56EDEFA4E2000FFFF50E1605B6F302850694291EB0E688EF1567700005E29B8DBD8689F21B3FD9390DD2966EE75E2F72979B05FF556FF9CD1DE31C69A000000000000000000000100000038A7A3CB80EC769C632B7B3E43525547ECD10000000000000000000000008FA6EF54FCC6B151330E9EE93461776BA40DC14DB181BCAF9C5FB864FC99DD0B00010A0100000000000000000000000000000000000001010B000000A1EDCCCE1BC2D300017F000064017F0000640B0001FFFF50E1605B6F302850694291EB0E688EF15677000000000000000000000000744B939B5C118A81D8DF69696B39823A8BCA86E9C8501D8AD7880883174F57D700FFFF50E1605B6F302850694291EB0E688EF15677000066615A211FE5DD24A12C4208F74A314DA5E2BB79FB521DBA006CCABABBD2BE0A00000000000000000000000C0001FFFF50E1605B6F302850694291EB0E688EF15677000000000000000000000000615C1E32955D81B8423E76EC83BD134EFE6B661F73CB2BDCEEBA9B93A84E496500FFFF50E1605B6F302850694291EB0E688EF156770000381BC7E9FD3B448E77BFC701169674A1D531C47BAD8703B043DFD313831AC04600000000000000000000000D0001FFFF50E1605B6F302850694291EB0E688EF1567700000000000000000000000085B34EF3E6A74EA04FDFA64FE54F774178D9AAD304226495045C678A78B52CDB00FFFF50E1605B6F302850694291EB0E688EF1567700005F8490420BC157D79E16F3B19737DF894B4B2C3E9DC127035E5778308683547500000000000000000000000E0001FFFF50E1605B6F302850694291EB0E688EF15677000000000000000000000000C75205BE46496FDF15453DC5D586285707DF3F46178B17EFA55E9DCCCE80270E00FFFF50E1605B6F302850694291EB0E688EF1567700002E892772D396F7878B38D5D06C3C151B75CF2CFF43F50B0E326F5D9099A8693500000000000000000000000F0001FFFF50E1605B6F302850694291EB0E688EF15677000000000000000000000000EF0D1AD92EF73E2C04219F4BE0A4C3540477FD8BFBA9F155DF6988C9E9C0F5C800FFFF50E1605B6F302850694291EB0E688EF156770000877C8E2C92651C806227FA999199224B6E4A3FF719C3ADFBED82F13F9C2E83540000000000000000000000100001FFFF50E1605B6F302850694291EB0E688EF1567700000000000000000000000070C8600DBDFB8FFC91DD02D14630BA0BA5EF45FE99F523735ACE13395917789A00FFFF50E1605B6F302850694291EB0E688EF156770000FCABBB33A460F748C0857F24DBCE119CCA6B49031D1B41AAC34111F7BA21CCA40000000000000000000000110001FFFF50E1605B6F302850694291EB0E688EF15677000000000000000000000000D3F61B90AEE5AD2CFFFCEFE5A6C2EBFC38B485B81FE37F546B40692CD4D5746C00FFFF50E1605B6F302850694291EB0E688EF1567700002E9D7D40D375DADC20FD6BE86EB94F8A9C7F3A6841C5E2A1784A2C5162C8040B0000000000000000000000120001FFFF50E1605B6F302850694291EB0E688EF15677000000000000000000000000490E045B9DEDEBF519AD24B30FE8DDCF146D5C261EEA702B624E3E6885848EF700FFFF50E1605B6F302850694291EB0E688EF156770000167BC45FF083C9B75FCD00D84D943D0EE050456C7C40CBCC495269FBDDEB871D0000000000000000000000130001FFFF50E1605B6F302850694291EB0E688EF15677000000000000000000000000F71CFF7AD9A95A8C7BDD0FC7107736CB59FE728D66E091040F197E61C138018900FFFF50E1605B6F302850694291EB0E688EF15677000017B4D70453AE3D48D25DB155FC370011FE2A07EE98B167C1D30610896F9ECD9A0000000000000000000000140001FFFF50E1605B6F302850694291EB0E688EF1567700000000000000000000000058FE62F7ECFBA75174D5E64E4D13C533F0CFC7C0EEE12A537C64CF532994F28900FFFF50E1605B6F302850694291EB0E688EF1567700002E4F9C7DACEA02DC95A4D87BB6AFEA6E11362952816176D930936FEBFC6ACC000000000000000000000000150001FFFF50E1605B6F302850694291EB0E688EF1567700000000000000000000000031EA6D8FD8587334E475016004CDEC30487CE36BC277AA0A577BA6BC5424C1FC00FFFF50E1605B6F302850694291EB0E688EF156770000A1AB36148DE9F7C02B930129A28FA21DC128FC77377F3A5FDF47F7FE1D26A6490000000000000000000000160001FFFF50E1605B6F302850694291EB0E688EF1567700000000000000000000000015DD8AF77B9FEE711FD07B8AFACB9D442AD2044DEFA9A10257019C12EACD57F600FFFF50E1605B6F302850694291EB0E688EF156770000A98D55EE6A1BA31E104E4A0B506B89CE979052F99485DFBA40B2E79764F51A6F0000000000000000000000170001FFFF50E1605B6F302850694291EB0E688EF15677000000000000000000000000EDCC12D89C8630EBA8D0439824F1E49660F6981C9976BFB78021113FB5CB1A2500FFFF50E1605B6F302850694291EB0E688EF1567700007D05C1158D88EF538B97D9A20CC965CB1819175952FCFB7E6352E69ACEA9DB530000000000000000000000180001FFFF50E1605B6F302850694291EB0E688EF1567700000000000000000000000053B6E8495FB486421640B90A3C7C67605A4ED8C9ED22A7DA4C3FDFCA80A3D9CB00FFFF50E1605B6F302850694291EB0E688EF156770000686EBC01CB5105482722A21294D404BD4C617EEDE82D871717EDF7A2C1B111480000000000000000000000190001FFFF50E1605B6F302850694291EB0E688EF15677000000000000000000000000B709B25C77B9BC3C573FCA8D2190A830EA40867BB8E98782C2CB7109D02E18A000FFFF50E1605B6F302850694291EB0E688EF156770000AE92B89F535F8738B1ED46762EF3D81CFC43A4C142179800F70AD3BB61C195E900000000000000000000001A0001FFFF50E1605B6F302850694291EB0E688EF15677000000000000000000000000504A3A52D01E272C2855FEC87DD6ACB69DFA7C86F9E116A34F4D77813994BB5300FFFF50E1605B6F302850694291EB0E688EF156770000574D45975379C9A5AB5854C43121E87D2F69F3464EB2F2B02E0AF4E5084554720000000000000000000000"; 
			Father0IP			= new IPAddress(new byte[] {127, 0, 0, 100});
			Cryptography		= Cryptography.No;
			EthereumNetwork		= Chain.Goerli;
			PoW					= false;
			TailLength			= 100;
			BailMin				= 0.000_000_001;

			Initials			= Enumerable.Range(100, 16).Select(i => new IPAddress(new byte[] {127, 0, 0, (byte)i})).ToArray();
		}
	}
}
